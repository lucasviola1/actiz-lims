@page "/amostras";
@using ActitzLims.Blazor.Models
@using ActizLims.FrontBlazor.Services

@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject IAmostraServiceBlazor AmostraService
@inject UserSessionService Session
@inject NavigationManager Navigation

<h3>Amostras</h3>

@if (showDialog)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">Acesso negado</h5>
                </div>
                <div class="modal-body">
                    <p>Você precisa estar logado para visualizar as amostras.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="IrParaLogin">Ir para login</button>
                </div>
            </div>
        </div>
    </div>
}

@if (amostras is null)
{
    <p><em>Carregando...</em></p>
}
else if (!amostras.Any())
{
    <p>Nenhuma amostra encontrada.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Código</th>
                <th>Descrição</th>
                <th>Data Recebimento</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in amostras)
            {
                <tr>
                    <td>@a.Codigo</td>
                    <td>@a.Descricao</td>
                    <td>@a.DataRecebimento.ToShortDateString()</td>
                    <td>@((StatusAmostra)a.Status)</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1" @onclick="@(() => EditarAmostra(a.Id))">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => DeletarAmostra(a.Id))">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (amostraParaEditar is not null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Editar Amostra</h5>
                    <button type="button" class="btn-close" @onclick="FecharModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@amostraParaEditar" OnValidSubmit="SalvarEdicao">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label>Código:</label>
                            <InputText class="form-control" @bind-Value="amostraParaEditar.Codigo" />
                        </div>

                        <div class="mb-3">
                            <label>Descrição:</label>
                            <InputText class="form-control" @bind-Value="amostraParaEditar.Descricao" />
                        </div>

                        <div class="mb-3">
                            <label>Data de Recebimento:</label>
                            <InputDate class="form-control" @bind-Value="amostraParaEditar.DataRecebimento" />
                        </div>

                        <div class="mb-3">
                            <label>Status:</label>
                            <InputSelect class="form-select" @bind-Value="amostraParaEditar.Status">
                                @foreach (var status in Enum.GetValues<StatusAmostra>())
                                {
                                    <option value="@status">@status</option>
                                }
                            </InputSelect>
                        </div>

                        <button type="submit" class="btn btn-success">Salvar</button>
                        <button type="button" class="btn btn-secondary ms-2" @onclick="FecharModal">Cancelar</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string? Token;
    private string? Nome;
    private string? UsuarioId;

    private bool showDialog = false;

    private AmostraBlazor? amostraParaEditar = null;
    private List<AmostraBlazor>? amostras;

    protected override async Task OnInitializedAsync()
    {
        Token = await JS.InvokeAsync<string>("localStorage.getItem", "jwt_token");
        Nome = await JS.InvokeAsync<string>("localStorage.getItem", "usuario_nome");
        UsuarioId = await JS.InvokeAsync<string>("localStorage.getItem", "usuario_id");

        if (string.IsNullOrEmpty(Token))
        {
            showDialog = true;
            return;
        }

        try
        {
            amostras = await AmostraService.ObterAmostrasAsync(UsuarioId, Token);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Erro ao buscar amostras.");
            amostras = new();
        }
    }


    private async Task DeletarAmostra(int id)
    {
        bool confirmar = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir esta amostra?");
        if (!confirmar) return;

        var response = await AmostraService.DeletarAmostraAsync(id, Token);

        if (response)
        {
            // Remove da lista local e atualiza
            var amostraRemovida = amostras.FirstOrDefault(x => x.Id == id);
            if (amostraRemovida is not null)
                amostras.Remove(amostraRemovida);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Erro ao deletar a amostra.");
        }
    }

    private async Task SalvarEdicao()
    {
        if (amostraParaEditar is null) return;

        var response = await AmostraService.EditarAmostraAsync(amostraParaEditar, Token);

        if (response)
        {
            var index = amostras.FindIndex(a => a.Id == amostraParaEditar.Id);
            if (index >= 0)
            {
                amostras[index] = amostraParaEditar;
            }

            FecharModal();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Erro ao salvar alterações.");
        }
    }

    private void EditarAmostra(int id)
    {
        var original = amostras?.FirstOrDefault(a => a.Id == id);
        if (original is not null)
        {
            amostraParaEditar = new AmostraBlazor
            {
                Id = original.Id,
                Codigo = original.Codigo,
                Descricao = original.Descricao,
                DataRecebimento = original.DataRecebimento,
                Status = original.Status,
                UserId = original.UserId
            };
        }
    }

    private void FecharModal()
    {
        amostraParaEditar = null;
    }

    private void IrParaLogin()
    {
        Navigation.NavigateTo("/pagelogin");
    }
}
