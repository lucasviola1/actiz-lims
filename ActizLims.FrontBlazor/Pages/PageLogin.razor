@page "/pagelogin"
@using ActizLims.FrontBlazor.Models
@using ActizLims.FrontBlazor.Services

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IAuthServiceBlazor AuthService
@inject IJSRuntime JS

<h3>Login</h3>

@if (IsLoggedIn)
{
    <p class="text-success">Olá, <strong>@Nome</strong>! Você já está logado.</p>
    <button class="btn btn-danger" @onclick="Logout">Sair</button>
}
else
{
    <div class="mb-3">
        <label>Usuário:</label>
        <input class="form-control" @bind="Username" />
    </div>
    <div class="mb-3">
        <label>Senha:</label>
        <input class="form-control" type="password" @bind="Password" />
    </div>

    <button class="btn btn-primary" @onclick="Login">Entrar</button>
    <br>
    <button class="btn btn-success me-2" @onclick="AbrirModal">Cadastrar-se</button>
}

@if (mostrarModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Cadastro de Usuário</h5>
                    <button type="button" class="btn-close" @onclick="FecharModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@NewUser" OnValidSubmit="Cadastrar">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label>Usuário:</label>
                            <InputText class="form-control" @bind-Value="NewUser.Usuario" />
                        </div>

                        <div class="mb-3">
                            <label>Senha:</label>
                            <InputText class="form-control" type="password" @bind-Value="NewUser.Senha" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">Cadastrar</button>
                            <button type="button" class="btn btn-secondary" @onclick="FecharModal">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

@code {
    private string? Token;
    private string? Nome;

    private string Username = string.Empty;
    private string Password = string.Empty;
    private string ErrorMessage = string.Empty;

    private bool IsLoggedIn = false;
    private bool mostrarModal = false;

    private UserBlazor NewUser = new();

    protected override async Task OnInitializedAsync()
    {
        Token = await JS.InvokeAsync<string>("localStorage.getItem", "jwt_token");
        Nome = await JS.InvokeAsync<string>("localStorage.getItem", "usuario_nome");
        IsLoggedIn = !string.IsNullOrWhiteSpace(Token);
    }

    private async Task Login()
    {
        UserBlazor user = new UserBlazor
        {
            Usuario = Username,
            Senha = Password
        };

        try
        {
            var data = await AuthService.Login(user);

            if (data is not null)
            {
                Navigation.NavigateTo("/amostras");
            }
            else
            {
                ErrorMessage = "Usuário ou senha inválidos.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Erro de conexão.";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task Cadastrar()
    {
        if(NewUser is not null)
        {
            if (string.IsNullOrWhiteSpace(NewUser.Usuario) || string.IsNullOrWhiteSpace(NewUser.Senha))
            {
                await JS.InvokeVoidAsync("alert", "Preencha todos os campos.");
                return;
            }

            var response = await AuthService.CadastrarUsuariosAsync(NewUser);

            if (response)
            {
                await AuthService.Login(NewUser);

                Navigation.NavigateTo("/pagelogin", forceLoad: true);
            }
        }

        mostrarModal = false; // fecha o modal após cadastro
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "jwt_token");
        await JS.InvokeVoidAsync("localStorage.removeItem", "usuario_nome");
        await JS.InvokeVoidAsync("localStorage.removeItem", "usuario_id");
        Navigation.NavigateTo("/pagelogin", forceLoad: true);
    }

    private void FecharModal()
    {
        mostrarModal = false;
    }
    
    private void AbrirModal()
    {
        NewUser = new(); // limpa o formulário
        mostrarModal = true;
    }

}
